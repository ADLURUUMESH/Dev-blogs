---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

// Props interface for the component
interface Props {
  src: string;
  alt: string;
  width: number;
  height: number;
  loading?: "eager" | "lazy" | null | undefined;
  decoding?: "async" | "auto" | "sync" | null | undefined;
  format?: "auto" | "avif" | "jpeg" | "png" | "svg" | "webp";
  class?: string;
  style?: any;
}

// Destructuring Astro.props to get the component's props
let {
  src,
  alt,
  width,
  height,
  loading,
  decoding,
  class: className,
  format,
  style,
} = Astro.props;

// Determine if the src is an external URL or a local path
const isExternal = src.startsWith("http") || src.startsWith("https");

// Handle external and local image paths
const imageSrc = isExternal ? src : `/public${src}`;

// Glob pattern to load images from the /public/images folder
const images = import.meta.glob("/public/images/**/*.{jpeg,jpg,png,gif}");

// Check if the source path is valid (only for local images)
const isValidPath = isExternal || images[imageSrc] ? true : false;

// Log a warning message in red if the image is not found (only for local images)
!isValidPath &&
  !isExternal &&
  console.error(
    `\x1b[31mImage not found - ${imageSrc}.\x1b[0m Make sure the image is in the /public/images folder.`,
  );
---

{
  isValidPath && (
    isExternal ? (
      <img
        src={imageSrc}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        decoding={decoding}
        class={className}
        style={style}
      />
    ) : (
      <Image
        src={images[imageSrc]() as Promise<{ default: ImageMetadata }>}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        decoding={decoding}
        class={className}
        format={format}
        style={style}
      />
    )
  )
}
